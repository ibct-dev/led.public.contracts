#pragma once
#include <eosio/testing/tester.hpp>

namespace eosio
{
namespace testing
{

struct contracts
{
   static std::vector<uint8_t> system_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/../contracts/led.system/led.system.wasm"); }
   static std::string system_wast() { return read_wast("${CMAKE_BINARY_DIR}/../contracts/led.system/led.system.wast"); }
   static std::vector<char> system_abi() { return read_abi("${CMAKE_BINARY_DIR}/../contracts/led.system/led.system.abi"); }
   static std::vector<uint8_t> token_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/../contracts/led.token/led.token.wasm"); }
   static std::string token_wast() { return read_wast("${CMAKE_BINARY_DIR}/../contracts/led.token/led.token.wast"); }
   static std::vector<char> token_abi() { return read_abi("${CMAKE_BINARY_DIR}/../contracts/led.token/led.token.abi"); }
   static std::vector<uint8_t> msig_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/../contracts/led.msig/led.msig.wasm"); }
   static std::string msig_wast() { return read_wast("${CMAKE_BINARY_DIR}/../contracts/led.msig/led.msig.wast"); }
   static std::vector<char> msig_abi() { return read_abi("${CMAKE_BINARY_DIR}/../contracts/led.msig/led.msig.abi"); }
   static std::vector<uint8_t> wrap_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/../contracts/led.wrap/led.wrap.wasm"); }
   static std::string wrap_wast() { return read_wast("${CMAKE_BINARY_DIR}/../contracts/led.wrap/led.wrap.wast"); }
   static std::vector<char> wrap_abi() { return read_abi("${CMAKE_BINARY_DIR}/../contracts/led.wrap/led.wrap.abi"); }
   static std::vector<uint8_t> bios_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/../contracts/led.bios/led.bios.wasm"); }
   static std::string bios_wast() { return read_wast("${CMAKE_BINARY_DIR}/../contracts/led.bios/led.bios.wast"); }
   static std::vector<char> bios_abi() { return read_abi("${CMAKE_BINARY_DIR}/../contracts/led.bios/led.bios.abi"); }
   static std::vector<uint8_t> forum_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/../contracts/led.forum/led.forum.wasm"); }
   static std::string forum_wast() { return read_wast("${CMAKE_BINARY_DIR}/../contracts/led.forum/led.forum.wast"); }
   static std::vector<char> forum_abi() { return read_abi("${CMAKE_BINARY_DIR}/../contracts/led.forum/led.forum.abi"); }

   struct util
   {
      static std::vector<uint8_t> reject_all_wasm() { return read_wasm("${CMAKE_SOURCE_DIR}/test_contracts/reject_all.wasm"); }
      static std::vector<uint8_t> exchange_wasm() { return read_wasm("${CMAKE_SOURCE_DIR}/test_contracts/exchange.wasm"); }
   };
};
} // namespace testing
} // namespace eosio